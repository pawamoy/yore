{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"],"fields":{"title":{"boost":1000.0},"text":{"boost":1.0},"tags":{"boost":1000000.0}}},"docs":[{"location":"","title":"yore","text":"<p>Manage legacy code with comments.</p> <p>In days of yore, ancients penned scripts of eld, their legacy code a relic of arcane lore. These venerable lines, cryptic and profound, whisper the wisdom of bygone masters, shaping our digital realm's very ground.</p> <p>\u2014 ChatGPT the Sage</p> <p>Because I lack the vocabulary to write such a thing myself.</p> <p>With time, the code base of your project evolves. You add features, you fix bugs, and you generally reorganize code. Some of these changes might make your project's public API incompatible with previous versions. In that case, you usually have to \"deprecate\" previous usage in favor of the new usage. That means you have to support both usages, and emit deprecation warnings when old usage is detected.</p> <p>Sometimes, you don't change anything in an incompatible way, but you want to support multiple versions of Python which provide different, incompatible APIs, or for which libraries you depend on provide different, incompatible APIs. In that case, you have to write multiple code branches to support the different Python versions. The code branches for versions of Python older than the latest one are what we call legacy code. Ideally you'd want to only use the API and features of the latest Python version, but your users are sometimes stuck with older versions, and you want to follow the official Python release cycle, which promises support for a certain amount of time after initial release for each minor version (3.11, 3.12, etc.). At the time of writing (2024, see Python release cycle for up-to-date information), each minor version is supported for approximately 5 years. There's a new minor version each year, so if you follow the release cycle, you maintain support for a window of 5 minor Python versions at any time. Sometimes you will have to support much older versions...</p> <p>For these use-cases, Yore comes to the rescue. </p> <p>Yore was born from the will of automating comments I had added along the evolution of my projects. I was usually writing comments such as <code>TODO: Remove once support for Python 3.8 is dropped</code>, or <code>TODO: Remove when we are ready for v1</code>. One day I decided to make these comments more formal, so I designed a very simple syntax and wrote a tool that would parse them and act on them.</p> <p>Yore can therefore find comments in your code base, to warn you about upcoming end-of-life dates of Python versions, or outdated code based on the project version. It can also apply transformations to your code, to remove legacy blocks or lines of code or update them.</p>"},{"location":"#quick-usage","title":"Quick usage","text":"<p>Write Yore-comments:</p> <pre><code># YORE: EOL 3.8: Replace block with line 4.\nif sys.version_info &lt; (3, 9):\n    from astunparse import unparse\nelse:\n    from ast import unparse\n</code></pre> <p>Check your code base:</p> <pre><code>$ yore check --warn-before-eol '5 months'\n./src/griffe/agents/nodes/_values.py:11: Python 3.8 will reach its End of Life within approx. 4 months\n</code></pre> <p>Fix your code base:</p> <pre><code>$ yore fix --fix-before-eol '5 months'\nfixed 1 comment in ./src/griffe/agents/nodes/_values.py\n</code></pre> <pre><code>diff --git a/src/griffe/agents/nodes/_values.py b/src/griffe/agents/nodes/_values.py\nindex 59bfacac..2f6eaa88 100644\n--- a/src/griffe/agents/nodes/_values.py\n+++ b/src/griffe/agents/nodes/_values.py\n@@ -8,11 +8,7 @@ from typing import TYPE_CHECKING\n\n from griffe.logger import get_logger\n\n-# YORE: EOL 3.8: Replace block with line 4.\n-if sys.version_info &lt; (3, 9):\n-    from astunparse import unparse\n-else:\n-    from ast import unparse\n+from ast import unparse\n\n if TYPE_CHECKING:\n     from pathlib import Path\n</code></pre> <p>See the usage documentation.</p>"},{"location":"#installation","title":"Installation","text":"<p>With <code>pip</code>:</p> <pre><code>pip install yore\n</code></pre> <p>With <code>pipx</code>:</p> <pre><code>python3.8 -m pip install --user pipx\npipx install yore\n</code></pre>"},{"location":"changelog/","title":"Changelog","text":"<p>All notable changes to this project will be documented in this file.</p> <p>The format is based on Keep a Changelog and this project adheres to Semantic Versioning.</p>"},{"location":"changelog/#010-2024-06-27","title":"0.1.0 - 2024-06-27","text":"<p>Compare with first commit</p>"},{"location":"changelog/#features","title":"Features","text":"<ul> <li>Implement initial version (68ca0cb by Timoth\u00e9e Mazzucotelli).</li> <li>Generate project with Copier UV template (30ec3c1 by Timoth\u00e9e Mazzucotelli).</li> </ul>"},{"location":"code_of_conduct/","title":"Contributor Covenant Code of Conduct","text":""},{"location":"code_of_conduct/#our-pledge","title":"Our Pledge","text":"<p>We as members, contributors, and leaders pledge to make participation in our community a harassment-free experience for everyone, regardless of age, body size, visible or invisible disability, ethnicity, sex characteristics, gender identity and expression, level of experience, education, socio-economic status, nationality, personal appearance, race, caste, color, religion, or sexual identity and orientation.</p> <p>We pledge to act and interact in ways that contribute to an open, welcoming, diverse, inclusive, and healthy community.</p>"},{"location":"code_of_conduct/#our-standards","title":"Our Standards","text":"<p>Examples of behavior that contributes to a positive environment for our community include:</p> <ul> <li>Demonstrating empathy and kindness toward other people</li> <li>Being respectful of differing opinions, viewpoints, and experiences</li> <li>Giving and gracefully accepting constructive feedback</li> <li>Accepting responsibility and apologizing to those affected by our mistakes,   and learning from the experience</li> <li>Focusing on what is best not just for us as individuals, but for the overall   community</li> </ul> <p>Examples of unacceptable behavior include:</p> <ul> <li>The use of sexualized language or imagery, and sexual attention or advances of   any kind</li> <li>Trolling, insulting or derogatory comments, and personal or political attacks</li> <li>Public or private harassment</li> <li>Publishing others' private information, such as a physical or email address,   without their explicit permission</li> <li>Other conduct which could reasonably be considered inappropriate in a   professional setting</li> </ul>"},{"location":"code_of_conduct/#enforcement-responsibilities","title":"Enforcement Responsibilities","text":"<p>Community leaders are responsible for clarifying and enforcing our standards of acceptable behavior and will take appropriate and fair corrective action in response to any behavior that they deem inappropriate, threatening, offensive, or harmful.</p> <p>Community leaders have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, and will communicate reasons for moderation decisions when appropriate.</p>"},{"location":"code_of_conduct/#scope","title":"Scope","text":"<p>This Code of Conduct applies within all community spaces, and also applies when an individual is officially representing the community in public spaces. Examples of representing our community include using an official e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event.</p>"},{"location":"code_of_conduct/#enforcement","title":"Enforcement","text":"<p>Instances of abusive, harassing, or otherwise unacceptable behavior may be reported to the community leaders responsible for enforcement at dev@pawamoy.fr. All complaints will be reviewed and investigated promptly and fairly.</p> <p>All community leaders are obligated to respect the privacy and security of the reporter of any incident.</p>"},{"location":"code_of_conduct/#enforcement-guidelines","title":"Enforcement Guidelines","text":"<p>Community leaders will follow these Community Impact Guidelines in determining the consequences for any action they deem in violation of this Code of Conduct:</p>"},{"location":"code_of_conduct/#1-correction","title":"1. Correction","text":"<p>Community Impact: Use of inappropriate language or other behavior deemed unprofessional or unwelcome in the community.</p> <p>Consequence: A private, written warning from community leaders, providing clarity around the nature of the violation and an explanation of why the behavior was inappropriate. A public apology may be requested.</p>"},{"location":"code_of_conduct/#2-warning","title":"2. Warning","text":"<p>Community Impact: A violation through a single incident or series of actions.</p> <p>Consequence: A warning with consequences for continued behavior. No interaction with the people involved, including unsolicited interaction with those enforcing the Code of Conduct, for a specified period of time. This includes avoiding interactions in community spaces as well as external channels like social media. Violating these terms may lead to a temporary or permanent ban.</p>"},{"location":"code_of_conduct/#3-temporary-ban","title":"3. Temporary Ban","text":"<p>Community Impact: A serious violation of community standards, including sustained inappropriate behavior.</p> <p>Consequence: A temporary ban from any sort of interaction or public communication with the community for a specified period of time. No public or private interaction with the people involved, including unsolicited interaction with those enforcing the Code of Conduct, is allowed during this period. Violating these terms may lead to a permanent ban.</p>"},{"location":"code_of_conduct/#4-permanent-ban","title":"4. Permanent Ban","text":"<p>Community Impact: Demonstrating a pattern of violation of community standards, including sustained inappropriate behavior, harassment of an individual, or aggression toward or disparagement of classes of individuals.</p> <p>Consequence: A permanent ban from any sort of public interaction within the community.</p>"},{"location":"code_of_conduct/#attribution","title":"Attribution","text":"<p>This Code of Conduct is adapted from the Contributor Covenant, version 2.1, available at https://www.contributor-covenant.org/version/2/1/code_of_conduct.html.</p> <p>Community Impact Guidelines were inspired by Mozilla's code of conduct enforcement ladder.</p> <p>For answers to common questions about this code of conduct, see the FAQ at https://www.contributor-covenant.org/faq. Translations are available at https://www.contributor-covenant.org/translations.</p>"},{"location":"contributing/","title":"Contributing","text":"<p>Contributions are welcome, and they are greatly appreciated! Every little bit helps, and credit will always be given.</p>"},{"location":"contributing/#environment-setup","title":"Environment setup","text":"<p>Nothing easier!</p> <p>Fork and clone the repository, then:</p> <pre><code>cd yore\nmake setup\n</code></pre> <p>Note</p> <p> If it fails for some reason, you'll need to install uv manually.</p> <p>You can install it with:</p> <pre><code>python3 -m pip install --user pipx\npipx install uv\n</code></pre> <p>Now you can try running <code>make setup</code> again, or simply <code>uv install</code>.</p> <p>You now have the dependencies installed.</p> <p>You can run the application with <code>make run yore [ARGS...]</code>.</p> <p>Run <code>make help</code> to see all the available actions!</p>"},{"location":"contributing/#tasks","title":"Tasks","text":"<p>This project uses duty to run tasks. A Makefile is also provided. The Makefile will try to run certain tasks on multiple Python versions. If for some reason you don't want to run the task on multiple Python versions, you run the task directly with <code>make run duty TASK</code>.</p> <p>The Makefile detects if a virtual environment is activated, so <code>make</code> will work the same with the virtualenv activated or not.</p> <p>If you work in VSCode, we provide an action to configure VSCode for the project.</p>"},{"location":"contributing/#development","title":"Development","text":"<p>As usual:</p> <ol> <li>create a new branch: <code>git switch -c feature-or-bugfix-name</code></li> <li>edit the code and/or the documentation</li> </ol> <p>Before committing:</p> <ol> <li>run <code>make format</code> to auto-format the code</li> <li>run <code>make check</code> to check everything (fix any warning)</li> <li>run <code>make test</code> to run the tests (fix any issue)</li> <li>if you updated the documentation or the project dependencies:<ol> <li>run <code>make docs</code></li> <li>go to http://localhost:8000 and check that everything looks good</li> </ol> </li> <li>follow our commit message convention</li> </ol> <p>If you are unsure about how to fix or ignore a warning, just let the continuous integration fail, and we will help you during review.</p> <p>Don't bother updating the changelog, we will take care of this.</p>"},{"location":"contributing/#commit-message-convention","title":"Commit message convention","text":"<p>Commit messages must follow our convention based on the Angular style or the Karma convention:</p> <pre><code>&lt;type&gt;[(scope)]: Subject\n\n[Body]\n</code></pre> <p>Subject and body must be valid Markdown. Subject must have proper casing (uppercase for first letter if it makes sense), but no dot at the end, and no punctuation in general.</p> <p>Scope and body are optional. Type can be:</p> <ul> <li><code>build</code>: About packaging, building wheels, etc.</li> <li><code>chore</code>: About packaging or repo/files management.</li> <li><code>ci</code>: About Continuous Integration.</li> <li><code>deps</code>: Dependencies update.</li> <li><code>docs</code>: About documentation.</li> <li><code>feat</code>: New feature.</li> <li><code>fix</code>: Bug fix.</li> <li><code>perf</code>: About performance.</li> <li><code>refactor</code>: Changes that are not features or bug fixes.</li> <li><code>style</code>: A change in code style/format.</li> <li><code>tests</code>: About tests.</li> </ul> <p>If you write a body, please add trailers at the end (for example issues and PR references, or co-authors), without relying on GitHub's flavored Markdown:</p> <pre><code>Body.\n\nIssue #10: https://github.com/namespace/project/issues/10\nRelated to PR namespace/other-project#15: https://github.com/namespace/other-project/pull/15\n</code></pre> <p>These \"trailers\" must appear at the end of the body, without any blank lines between them. The trailer title can contain any character except colons <code>:</code>. We expect a full URI for each trailer, not just GitHub autolinks (for example, full GitHub URLs for commits and issues, not the hash or the #issue-number).</p> <p>We do not enforce a line length on commit messages summary and body, but please avoid very long summaries, and very long lines in the body, unless they are part of code blocks that must not be wrapped.</p>"},{"location":"contributing/#pull-requests-guidelines","title":"Pull requests guidelines","text":"<p>Link to any related issue in the Pull Request message.</p> <p>During the review, we recommend using fixups:</p> <pre><code># SHA is the SHA of the commit you want to fix\ngit commit --fixup=SHA\n</code></pre> <p>Once all the changes are approved, you can squash your commits:</p> <pre><code>git rebase -i --autosquash main\n</code></pre> <p>And force-push:</p> <pre><code>git push -f\n</code></pre> <p>If this seems all too complicated, you can push or force-push each new commit, and we will squash them ourselves if needed, before merging.</p>"},{"location":"credits/","title":"Credits","text":""},{"location":"credits/#exec-1--credits","title":"Credits","text":"<p>These projects were used to build yore. Thank you!</p> <p>Python | uv | copier-uv</p>"},{"location":"credits/#exec-1--runtime-dependencies","title":"Runtime dependencies","text":"Project Summary Version (accepted) Version (last resolved) License cappa Declarative CLI argument parser. <code>&gt;=0.22</code> <code>0.22.0</code> Apache-2.0 humanize Python humanize utilities <code>&gt;=4.9</code> <code>4.9.0</code> MIT markdown-it-py Python port of markdown-it. Markdown parsing, done right! <code>&gt;=2.2.0</code> <code>3.0.0</code> MIT License mdurl Markdown URL utilities <code>~=0.1</code> <code>0.1.2</code> MIT License mypy-extensions Type system extensions for programs checked with the mypy type checker. <code>&gt;=0.4.3, &gt;=0.3.0</code> <code>1.0.0</code> MIT License packaging Core utilities for Python packages <code>&gt;=24.1, &gt;=24.0</code> <code>24.1</code> Apache Software License + BSD License Pygments Pygments is a syntax highlighting package written in Python. <code>&gt;=2.5.1, &gt;=2.13.0, &lt;3.0.0</code> <code>2.18.0</code> BSD-2-Clause rich Render rich text, tables, progress bars, syntax highlighting, markdown and more to the terminal <code>&gt;=12.0.0</code> <code>13.7.1</code> MIT typing-inspect Runtime inspection utilities for typing module. <code>&gt;=0.9.0</code> <code>0.9.0</code> MIT typing_extensions Backported and Experimental Type Hints for Python 3.8+ <code>&gt;=4.8.0, &gt;=4.0.1</code> <code>4.12.2</code> Python Software Foundation License"},{"location":"credits/#exec-1--development-dependencies","title":"Development dependencies","text":"Project Summary Version (accepted) Version (last resolved) License ansimarkup Produce colored terminal text with an xml-like markup <code>~=1.4</code> <code>1.5.0</code> Revised BSD License appdirs A small Python module for determining appropriate platform-specific dirs, e.g. a \"user data dir\". <code>&gt;=1.4</code> <code>1.4.4</code> MIT Babel Internationalization utilities <code>~=2.10</code> <code>2.15.0</code> BSD-3-Clause backports.tarfile Backport of CPython tarfile module <code>1.2.0</code> MIT License black The uncompromising code formatter. <code>&gt;=24.4</code> <code>24.4.2</code> MIT build A simple, correct Python build frontend <code>&gt;=1.2</code> <code>1.2.1</code> MIT License certifi Python package for providing Mozilla's CA Bundle. <code>&gt;=2017.4.17</code> <code>2024.6.2</code> MPL-2.0 cffi Foreign Function Interface for Python calling C code. <code>&gt;=1.12</code> <code>1.16.0</code> MIT charset-normalizer The Real First Universal Charset Detector. Open, modern and actively maintained alternative to Chardet. <code>&gt;=2, &lt;4</code> <code>3.3.2</code> MIT click Composable command line interface toolkit <code>&gt;=7.0</code> <code>8.1.7</code> BSD-3-Clause colorama Cross-platform colored terminal text. <code>&gt;=0.4</code> <code>0.4.6</code> BSD License coverage Code coverage measurement for Python <code>&gt;=5.2.1</code> <code>7.5.4</code> Apache-2.0 cryptography cryptography is a package which provides cryptographic recipes and primitives to Python developers. <code>&gt;=2.0</code> <code>42.0.8</code> Apache-2.0 OR BSD-3-Clause csscompressor A python port of YUI CSS Compressor <code>&gt;=0.9.5</code> <code>0.9.5</code> BSD docutils Docutils -- Python Documentation Utilities <code>&gt;=0.13.1</code> <code>0.21.2</code> Public Domain + Python Software Foundation License + BSD License + GNU General Public License (GPL) duty A simple task runner. <code>&gt;=1.4</code> <code>1.4.0</code> ISC editables Editable installations <code>&gt;=0.5</code> <code>0.5</code> MIT License execnet execnet: rapid multi-Python deployment <code>&gt;=2.1</code> <code>2.1.1</code> MIT failprint Run a command, print its output only if it fails. <code>&gt;=0.11, !=1.0.0</code> <code>1.0.2</code> ISC ghp-import Copy your docs directly to the gh-pages branch. <code>&gt;=1.0</code> <code>2.1.0</code> Apache Software License git-changelog Automatic Changelog generator using Jinja2 templates. <code>&gt;=2.5</code> <code>2.5.2</code> ISC gitdb Git Object Database <code>&gt;=4.0.1, &lt;5</code> <code>4.0.11</code> BSD License GitPython GitPython is a Python library used to interact with Git repositories <code>3.1.43</code> BSD-3-Clause griffe Signatures for entire Python programs. Extract the structure, the frame, the skeleton of your project, to generate API documentation or find breaking changes in your API. <code>&gt;=0.47</code> <code>0.47.0.1.2.0</code> ISC htmlmin2 An HTML Minifier <code>&gt;=0.1.13</code> <code>0.1.13</code> BSD idna Internationalized Domain Names in Applications (IDNA) <code>&gt;=2.5, &lt;4</code> <code>3.7</code> BSD License importlib_metadata Read metadata from Python packages <code>&gt;=4.4</code> <code>8.0.0</code> Apache Software License iniconfig brain-dead simple config-ini parsing <code>2.0.0</code> MIT jaraco.classes Utility functions for Python class constructs <code>3.4.0</code> MIT License jaraco.context Useful decorators and context managers <code>5.3.0</code> MIT License jaraco.functools Functools like those found in stdlib <code>4.0.1</code> MIT License jeepney Low-level, pure Python DBus protocol wrapper. <code>&gt;=0.4.2</code> <code>0.8.0</code> MIT License Jinja2 A very fast and expressive template engine. <code>&gt;=2.10</code> <code>3.1.4</code> BSD License jsmin JavaScript minifier. <code>&gt;=3.0.1</code> <code>3.0.1</code> MIT License keyring Store and access your passwords safely. <code>&gt;=15.1</code> <code>25.2.1</code> MIT License Markdown Python implementation of John Gruber's Markdown. <code>&gt;=3.3.6</code> <code>3.6</code> BSD License markdown-callouts Markdown extension: a classier syntax for admonitions <code>&gt;=0.4</code> <code>0.4.0</code> MIT markdown-exec Utilities to execute code blocks in Markdown files. <code>&gt;=1.8</code> <code>1.9.3</code> ISC markdown-it-py Python port of markdown-it. Markdown parsing, done right! <code>&gt;=2.2.0</code> <code>3.0.0</code> MIT License MarkupSafe Safely add untrusted strings to HTML/XML markup. <code>&gt;=2.0.1</code> <code>2.1.5</code> BSD-3-Clause mdurl Markdown URL utilities <code>~=0.1</code> <code>0.1.2</code> MIT License mergedeep A deep merge function for \ud83d\udc0d. <code>&gt;=1.3.4</code> <code>1.3.4</code> MIT License mkdocs Project documentation with Markdown. <code>&gt;=1.6</code> <code>1.6.0</code> BSD-2-Clause mkdocs-autorefs Automatically link across pages in MkDocs. <code>&gt;=0.3.1</code> <code>1.0.1</code> ISC mkdocs-coverage MkDocs plugin to integrate your coverage HTML report into your site. <code>&gt;=1.0</code> <code>1.1.0</code> ISC mkdocs-gen-files MkDocs plugin to programmatically generate documentation pages during the build <code>&gt;=0.5</code> <code>0.5.0</code> MIT mkdocs-get-deps MkDocs extension that lists all dependencies according to a mkdocs.yml file <code>&gt;=0.2.0</code> <code>0.2.0</code> MIT mkdocs-git-committers-plugin-2 An MkDocs plugin to create a list of contributors on the page. The git-committers plugin will seed the template context with a list of GitHub or GitLab committers and other useful GIT info such as last modified date <code>&gt;=2.3</code> <code>2.3.0</code> MIT mkdocs-literate-nav MkDocs plugin to specify the navigation in Markdown instead of YAML <code>&gt;=0.6</code> <code>0.6.1</code> MIT mkdocs-material Documentation that simply works <code>&gt;=9.5</code> <code>9.5.27+insiders.4.53.11</code> MIT mkdocs-material-extensions Extension pack for Python Markdown and MkDocs Material. <code>~=1.3</code> <code>1.3.1</code> MIT mkdocs-minify-plugin An MkDocs plugin to minify HTML, JS or CSS files prior to being written to disk <code>&gt;=0.8</code> <code>0.8.0</code> MIT mkdocstrings Automatic documentation from sources, for MkDocs. <code>&gt;=0.25</code> <code>0.25.1</code> ISC mkdocstrings-python A Python handler for mkdocstrings. <code>&gt;=0.5.2</code> <code>1.10.5.1.8.3</code> ISC more-itertools More routines for operating on iterables, beyond itertools <code>10.3.0</code> MIT License mypy Optional static typing for Python <code>&gt;=1.10</code> <code>1.10.1</code> MIT mypy-extensions Type system extensions for programs checked with the mypy type checker. <code>&gt;=0.4.3, &gt;=0.3.0</code> <code>1.0.0</code> MIT License nh3 Python bindings to the ammonia HTML sanitization library. <code>&gt;=0.2.14</code> <code>0.2.17</code> MIT packaging Core utilities for Python packages <code>&gt;=24.1, &gt;=24.0</code> <code>24.1</code> Apache Software License + BSD License paginate Divides large result sets into pages for easier browsing <code>~=0.5</code> <code>0.5.6</code> MIT pathspec Utility library for gitignore style pattern matching of file paths. <code>&gt;=0.11.1</code> <code>0.12.1</code> Mozilla Public License 2.0 (MPL 2.0) pkginfo Query metadata from sdists / bdists / installed packages. <code>&gt;=1.8.1</code> <code>1.10.0</code> MIT platformdirs A small Python package for determining appropriate platform-specific dirs, e.g. a <code>user data dir</code>. <code>&gt;=2</code> <code>4.2.2</code> MIT pluggy plugin and hook calling mechanisms for python <code>&gt;=1.5, &lt;2.0</code> <code>1.5.0</code> MIT ptyprocess Run a subprocess in a pseudo terminal <code>~=0.6</code> <code>0.7.0</code> ISC License (ISCL) pycparser C parser in Python <code>2.22</code> BSD-3-Clause Pygments Pygments is a syntax highlighting package written in Python. <code>&gt;=2.5.1, &gt;=2.13.0, &lt;3.0.0</code> <code>2.18.0</code> BSD-2-Clause pymdown-extensions Extension pack for Python Markdown. <code>&gt;=9</code> <code>10.8.1</code> MIT pyproject_hooks Wrappers to call pyproject.toml-based build backend hooks. <code>1.1.0</code> MIT License pytest pytest: simple powerful testing with Python <code>&gt;=8.2</code> <code>8.2.2</code> MIT pytest-cov Pytest plugin for measuring coverage. <code>&gt;=5.0</code> <code>5.0.0</code> MIT pytest-randomly Pytest plugin to randomly order tests and control random.seed. <code>&gt;=3.15</code> <code>3.15.0</code> MIT pytest-xdist pytest xdist plugin for distributed testing, most importantly across multiple CPUs <code>&gt;=3.6</code> <code>3.6.1</code> MIT License python-dateutil Extensions to the standard Python datetime module <code>&gt;=2.8.1</code> <code>2.9.0.post0</code> BSD License + Apache Software License PyYAML YAML parser and emitter for Python <code>&gt;=5.1</code> <code>6.0.1</code> MIT pyyaml_env_tag A custom YAML tag for referencing environment variables in YAML files. <code>&gt;=0.1</code> <code>0.1</code> MIT License readme_renderer readme_renderer is a library for rendering readme descriptions for Warehouse <code>&gt;=35.0</code> <code>43.0</code> Apache License, Version 2.0 regex Alternative regular expression module, to replace re. <code>&gt;=2022.4</code> <code>2024.5.15</code> Apache Software License requests Python HTTP for Humans. <code>&gt;=2.20</code> <code>2.32.3</code> Apache-2.0 requests-toolbelt A utility belt for advanced users of python-requests <code>&gt;=0.8.0, !=0.9.0</code> <code>1.0.0</code> Apache 2.0 rfc3986 Validating URI References per RFC 3986 <code>&gt;=1.4.0</code> <code>2.0.0</code> Apache 2.0 rich Render rich text, tables, progress bars, syntax highlighting, markdown and more to the terminal <code>&gt;=12.0.0</code> <code>13.7.1</code> MIT ruff An extremely fast Python linter and code formatter, written in Rust. <code>&gt;=0.4</code> <code>0.4.10</code> MIT SecretStorage Python bindings to FreeDesktop.org Secret Service API <code>&gt;=3.2</code> <code>3.3.3</code> BSD 3-Clause License semver Python helper for Semantic Versioning (https://semver.org) <code>&gt;=2.13</code> <code>3.0.2</code> BSD six Python 2 and 3 compatibility utilities <code>&gt;=1.5</code> <code>1.16.0</code> MIT smmap A pure Python implementation of a sliding window memory map manager <code>&gt;=3.0.1, &lt;6</code> <code>5.0.1</code> BSD twine Collection of utilities for publishing packages on PyPI <code>&gt;=5.1</code> <code>5.1.1</code> Apache Software License types-Markdown Typing stubs for Markdown <code>&gt;=3.6</code> <code>3.6.0.20240316</code> Apache-2.0 license types-PyYAML Typing stubs for PyYAML <code>&gt;=6.0</code> <code>6.0.12.20240311</code> Apache-2.0 license typing_extensions Backported and Experimental Type Hints for Python 3.8+ <code>&gt;=4.8.0, &gt;=4.0.1</code> <code>4.12.2</code> Python Software Foundation License urllib3 HTTP library with thread-safe connection pooling, file post, and more. <code>&gt;=1.26.0</code> <code>2.2.2</code> MIT License watchdog Filesystem events monitoring <code>&gt;=2.0</code> <code>4.0.1</code> Apache-2.0 zipp Backport of pathlib-compatible object wrapper for zip files <code>&gt;=0.5</code> <code>3.19.2</code> MIT License <p>More credits from the author</p>"},{"location":"license/","title":"License","text":"<pre><code>ISC License\n\nCopyright (c) 2024, Timoth\u00e9e Mazzucotelli\n\nPermission to use, copy, modify, and/or distribute this software for any\npurpose with or without fee is hereby granted, provided that the above\ncopyright notice and this permission notice appear in all copies.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES\nWITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF\nMERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR\nANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES\nWHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN\nACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF\nOR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.\n</code></pre>"},{"location":"usage/","title":"Usage","text":"<p>Yore lets you write <code># YORE</code> comments in your code base to mark some lines of blocks of code as being legacy code: only there to support \"old\" versions of Python, or for backward compatibility with previous versions of your own project.</p>"},{"location":"usage/#syntax","title":"Syntax","text":"<p>The syntax is as follows:</p> <pre><code># YORE: &lt;eol|bump&gt; &lt;VERSION&gt;: remove &lt;block|line&gt;.\n# YORE: &lt;eol|bump&gt; &lt;VERSION&gt;: replace &lt;block|line&gt; with line &lt;LINENO&gt;.\n# YORE: &lt;eol|bump&gt; &lt;VERSION&gt;: replace &lt;block|line&gt; with lines &lt;LINE-RANGE1[, LINE-RANGE2...]&gt;.\n# YORE: &lt;eol|bump&gt; &lt;VERSION&gt;: replace &lt;block|line&gt; with `&lt;STRING&gt;`.\n# YORE: &lt;eol|bump&gt; &lt;VERSION&gt;: [regex-]replace `&lt;PATTERN1&gt;` with `&lt;PATTERN2&gt;` within &lt;block|line&gt;.\n</code></pre> <p>Terms between <code>&lt;</code> and <code>&gt;</code> must be provided, while terms between <code>[</code> and <code>]</code> are optional. Uppercase terms are placeholders that you should replace with actual values, while lowercase terms are keywords that you should use literally. Everything except placeholders is case-insensitive.</p>"},{"location":"usage/#examples","title":"Examples","text":"<p>All the following examples are real-life examples extracted from another project (Griffe).</p> <p>Remove the module-level <code>__getattr__</code> function when we bump the project to version 1.0.0.</p> <pre><code># YORE: Bump 1.0.0: Remove block.\ndef __getattr__(name: str) -&gt; Any:\n    if name == \"load_git\":\n        warnings.warn(\n            f\"Importing {name} from griffe.git is deprecated. Import it from griffe.loader instead.\",\n            DeprecationWarning,\n            stacklevel=2,\n        )\n\n        from griffe.loader import load_git\n\n        return load_git\n    raise AttributeError\n</code></pre> <p>Simplify <code>ast.unparse</code> import when Python 3.8 reaches its End of Life.</p> <pre><code># YORE: EOL 3.8: Replace block with line 4.\nif sys.version_info &lt; (3, 9):\n    from astunparse import unparse\nelse:\n    from ast import unparse\n</code></pre> <p>Replace <code>lstrip</code> by <code>removeprefix</code> when Python 3.8 reaches its End of Life.</p> <pre><code># YORE: EOL 3.8: Replace `lstrip` with `removeprefix` within line.\nreturn [cpn.lstrip(\"_\") for cpn in a.split(\".\")] == [cpn.lstrip(\"_\") for cpn in b.split(\".\")]\n</code></pre> <p>Simplify union of accepted types when we bump the project to version 1.0.0.</p> <pre><code>def load_extensions(\n    # YORE: Bump 1.0.0: Replace ` | Sequence[LoadableExtension],` with `` within line.\n    *exts: LoadableExtension | Sequence[LoadableExtension],\n): ...\n</code></pre> <p>Remove parameter from a signature when we bump the project to version 1.0.0.</p> <pre><code>def load(\n    ...\n    # YORE: Bump 1.0.0: Remove line.\n    module: str | Path | None = None,\n    ...\n):\n    ...\n</code></pre> <p>Replace line with something else when we bump the project to version 1.0.0.</p> <pre><code># YORE: Bump 1.0.0: Replace line with `return self.public`.\nreturn _True if self.public else _False\n</code></pre>"},{"location":"usage/#blocks","title":"Blocks","text":"<p>A block is a list of consecutive non-blank or over-indented lines.</p> <pre><code># YORE: This is a block.\nprint(\"hello\")\nprint(\"world\")\n\n# YORE: This is another block.\nprint(\"goodbye\")\n</code></pre> <p>Here we see that the blank line marked the end of the first block. But if the lines following a blank lines are over-indented, they will still count as being part of the block:</p> <pre><code>def function():    \n    # YORE: This is a block.\n    print(\"hello\")\n    if some_condition:\n        do_this()\n\n        # Blank line above, but next lines are over-indented\n        # compared to the first line of the block `print(\"hello\")`.\n        do_that()\n</code></pre> <p>If the indentation goes back to the initial level, but there is no blank line right before it, the block continues:</p> <pre><code>def function():\n    # YORE: This is a block.\n    print(\"hello\")\n    if some_condition:\n        do_this()\n\n        do_that()\n    if something_else:  # This is still part of the block!\n        and_do_this()\n</code></pre> <p>If you don't want the <code>something_else</code> condition and code to be part of the block, separate it with a blank line:</p> <pre><code>def function():\n    # YORE: This is a block.\n    print(\"hello\")\n    if some_condition:\n        do_this()\n\n        do_that()\n\n    if something_else:  # This is not part of the first block anymore.\n        and_do_this()\n</code></pre> <p>A line that is less indented that the initial line will also terminate a block.</p> <pre><code>if something:\n    # YORE: Start of a block. Initial indent = 4.\n    print(\"hello\")\nif something_else:  # Indent = 0, not part of the block above.\n    print(\"goodbye\")\n</code></pre>"},{"location":"usage/#commands","title":"Commands","text":""},{"location":"usage/#yore-check","title":"<code>yore check</code>","text":"<p>Once you have written a few Yore-comments in your code base, you can check them with the <code>yore check</code> command. If a comment is outdated, for example the current version of the project is equal to or higher than a \"bump\" comment, Yore will warn you. Similarly, if a Python version has reached its end of life, and Yore finds an \"eol\" comment for this version, it will warn you. If you want to be warned before the EOL date of a Python version, use the <code>-w</code>, <code>--warn-before-eol</code> option. To specify the upcoming project version, use the <code>-b</code>, <code>--bump</code> option.</p> <pre><code>% yore check --warn-before-eol '5 months' --bump 1.0\n./src/griffe/encoders.py:91: Code is scheduled for update/removal in 1.0.0 which is older than or equal to 1\n./src/griffe/dataclasses.py:155: Code is scheduled for update/removal in 1.0.0 which is older than or equal to 1\n./src/griffe/dataclasses.py:530: Code is scheduled for update/removal in 1.0.0 which is older than or equal to 1\n./src/griffe/dataclasses.py:540: Code is scheduled for update/removal in 1.0.0 which is older than or equal to 1\n./src/griffe/dataclasses.py:553: Code is scheduled for update/removal in 1.0.0 which is older than or equal to 1\n./src/griffe/mixins.py:412: Code is scheduled for update/removal in 1.0.0 which is older than or equal to 1\n./src/griffe/mixins.py:418: Code is scheduled for update/removal in 1.0.0 which is older than or equal to 1\n./src/griffe/mixins.py:425: Code is scheduled for update/removal in 1.0.0 which is older than or equal to 1\n./src/griffe/mixins.py:433: Code is scheduled for update/removal in 1.0.0 which is older than or equal to 1\n./src/griffe/mixins.py:437: Code is scheduled for update/removal in 1.0.0 which is older than or equal to 1\n./src/griffe/tests.py:320: Python 3.8 will reach its End of Life within approx. 4 months\n./src/griffe/expressions.py:1169: Python 3.8 will reach its End of Life within approx. 4 months\n./src/griffe/agents/nodes/_runtime.py:24: Python 3.8 will reach its End of Life within approx. 4 months\n./src/griffe/agents/nodes/_values.py:11: Python 3.8 will reach its End of Life within approx. 4 months\n./src/griffe/git.py:19: Code is scheduled for update/removal in 1.0.0 which is older than or equal to 1\n./src/griffe/extensions/base.py:464: Code is scheduled for update/removal in 1.0.0 which is older than or equal to 1\n./src/griffe/extensions/base.py:477: Code is scheduled for update/removal in 1.0.0 which is older than or equal to 1\n./src/griffe/extensions/base.py:491: Code is scheduled for update/removal in 1.0.0 which is older than or equal to 1\n./src/griffe/loader.py:97: Code is scheduled for update/removal in 1.0.0 which is older than or equal to 1\n./src/griffe/loader.py:130: Code is scheduled for update/removal in 1.0.0 which is older than or equal to 1\n./src/griffe/loader.py:163: Code is scheduled for update/removal in 1.0.0 which is older than or equal to 1\n./src/griffe/loader.py:742: Code is scheduled for update/removal in 1.0.0 which is older than or equal to 1\n./src/griffe/loader.py:811: Code is scheduled for update/removal in 1.0.0 which is older than or equal to 1\n./src/griffe/loader.py:835: Code is scheduled for update/removal in 1.0.0 which is older than or equal to 1\n./src/griffe/loader.py:888: Code is scheduled for update/removal in 1.0.0 which is older than or equal to 1\n./src/griffe/loader.py:905: Code is scheduled for update/removal in 1.0.0 which is older than or equal to 1\n</code></pre> <p>By default Yore will search and scan Python modules in the current working directory (excluding cache folders, virtualenvs, etc.), but you can specify multiple paths on the command line:</p> <pre><code>yore check src scripts/this_module.py docs/*.py\n# same thing for yore fix\n</code></pre>"},{"location":"usage/#yore-fix","title":"<code>yore fix</code>","text":"<p>Once you are ready, you can apply transformations to your code base with the <code>yore fix</code> command. It will apply what the comments instruct and remove or replace line or blocks of code, but only when a Python version has reached its End of Life date or when the provided upcoming project version is equal to or higher than the one specified in the comments. All comments that would not emit warnings will be left untouched. The <code>-w</code>, <code>--warn-before-eol</code> becomes <code>-f</code>, <code>--fix-before-eol</code>. The <code>-b</code>, <code>--bump</code> option stays the same.</p> <pre><code>% yore fix -f5m -b1\nfixed 1 comment in ./src/griffe/encoders.py\nfixed 4 comments in ./src/griffe/dataclasses.py\nfixed 5 comments in ./src/griffe/mixins.py\nfixed 1 comment in ./src/griffe/tests.py\nfixed 1 comment in ./src/griffe/expressions.py\nfixed 1 comment in ./src/griffe/agents/nodes/_runtime.py\nfixed 1 comment in ./src/griffe/agents/nodes/_values.py\nfixed 1 comment in ./src/griffe/git.py\nfixed 3 comments in ./src/griffe/extensions/base.py\nfixed 8 comments in ./src/griffe/loader.py\n</code></pre> <p>Here is output of <code>git diff</code> after running <code>yore fix</code> on the code base:</p> <pre><code>diff --git a/src/griffe/agents/nodes/_runtime.py b/src/griffe/agents/nodes/_runtime.py\nindex 5e3e01c6..1671fdc2 100644\n--- a/src/griffe/agents/nodes/_runtime.py\n+++ b/src/griffe/agents/nodes/_runtime.py\n@@ -21,8 +21,7 @@ _cyclic_relationships = {\n\n\n def _same_components(a: str, b: str, /) -&gt; bool:\n-    # YORE: EOL 3.8: Replace `lstrip` with `removeprefix` within line.\n-    return [cpn.lstrip(\"_\") for cpn in a.split(\".\")] == [cpn.lstrip(\"_\") for cpn in b.split(\".\")]\n+    return [cpn.removeprefix(\"_\") for cpn in a.split(\".\")] == [cpn.removeprefix(\"_\") for cpn in b.split(\".\")]\n\n\n class ObjectNode:\ndiff --git a/src/griffe/agents/nodes/_values.py b/src/griffe/agents/nodes/_values.py\nindex 59bfacac..2f6eaa88 100644\n--- a/src/griffe/agents/nodes/_values.py\n+++ b/src/griffe/agents/nodes/_values.py\n@@ -8,11 +8,7 @@ from typing import TYPE_CHECKING\n\n from griffe.logger import get_logger\n\n-# YORE: EOL 3.8: Replace block with line 4.\n-if sys.version_info &lt; (3, 9):\n-    from astunparse import unparse\n-else:\n-    from ast import unparse\n+from ast import unparse\n\n if TYPE_CHECKING:\n     from pathlib import Path\ndiff --git a/src/griffe/dataclasses.py b/src/griffe/dataclasses.py\nindex 22ddf24e..cfdc7926 100644\n--- a/src/griffe/dataclasses.py\n+++ b/src/griffe/dataclasses.py\n@@ -152,9 +152,6 @@ class Docstring:\n         Returns:\n             A dictionary.\n         \"\"\"\n-        # YORE: Bump 1.0.0: Remove block.\n-        if docstring_parser is not None:\n-            warnings.warn(\"Parameter `docstring_parser` is deprecated and has no effect.\", stacklevel=1)\n\n         base: dict[str, Any] = {\n             \"value\": self.value,\n@@ -527,8 +524,7 @@ class Object(ObjectAliasMixin):\n         \"\"\"Whether this object is a namespace subpackage.\"\"\"\n         return False\n\n-    # YORE: Bump 1.0.0: Replace ` | set[str]` with `` within line.\n-    def has_labels(self, *labels: str | set[str]) -&gt; bool:\n+    def has_labels(self, *labels: str) -&gt; bool:\n         \"\"\"Tell if this object has all the given labels.\n\n         Parameters:\n@@ -537,21 +533,8 @@ class Object(ObjectAliasMixin):\n         Returns:\n             True or False.\n         \"\"\"\n-        # YORE: Bump 1.0.0: Remove block.\n-        all_labels = set()\n-        for label in labels:\n-            if isinstance(label, str):\n-                all_labels.add(label)\n-            else:\n-                warnings.warn(\n-                    \"Passing a set of labels to `has_labels` is deprecated. Pass multiple strings instead.\",\n-                    DeprecationWarning,\n-                    stacklevel=2,\n-                )\n-                all_labels.update(label)\n\n-        # YORE: Bump 1.0.0: Replace `all_labels` with `set(labels)` within line.\n-        return all_labels.issubset(self.labels)\n+        return set(labels).issubset(self.labels)\n\n     def filter_members(self, *predicates: Callable[[Object | Alias], bool]) -&gt; dict[str, Object | Alias]:\n         \"\"\"Filter and return members based on predicates.\ndiff --git a/src/griffe/encoders.py b/src/griffe/encoders.py\nindex e99fc1d4..3deea7db 100644\n--- a/src/griffe/encoders.py\n+++ b/src/griffe/encoders.py\n@@ -88,13 +88,6 @@ class JSONEncoder(json.JSONEncoder):\n         super().__init__(*args, **kwargs)\n         self.full: bool = full\n\n-        # YORE: Bump 1.0.0: Remove block.\n-        self.docstring_parser: Parser | None = docstring_parser\n-        self.docstring_options: dict[str, Any] = docstring_options or {}\n-        if docstring_parser is not None:\n-            warnings.warn(\"Parameter `docstring_parser` is deprecated and has no effect.\", stacklevel=1)\n-        if docstring_options is not None:\n-            warnings.warn(\"Parameter `docstring_options` is deprecated and has no effect.\", stacklevel=1)\n\n     def default(self, obj: Any) -&gt; Any:\n         \"\"\"Return a serializable representation of the given object.\ndiff --git a/src/griffe/expressions.py b/src/griffe/expressions.py\nindex c03d0a96..d9d6ebfd 100644\n--- a/src/griffe/expressions.py\n+++ b/src/griffe/expressions.py\n@@ -1166,17 +1166,6 @@ _node_map: dict[type, Callable[[Any, Module | Class], Expr]] = {\n     ast.YieldFrom: _build_yield_from,\n }\n\n-# YORE: EOL 3.8: Remove block.\n-if sys.version_info &lt; (3, 9):\n-\n-    def _build_extslice(node: ast.ExtSlice, parent: Module | Class, **kwargs: Any) -&gt; Expr:\n-        return ExprExtSlice([_build(dim, parent, **kwargs) for dim in node.dims])\n-\n-    def _build_index(node: ast.Index, parent: Module | Class, **kwargs: Any) -&gt; Expr:\n-        return _build(node.value, parent, **kwargs)\n-\n-    _node_map[ast.ExtSlice] = _build_extslice\n-    _node_map[ast.Index] = _build_index\n\n\n def _build(node: ast.AST, parent: Module | Class, **kwargs: Any) -&gt; Expr:\ndiff --git a/src/griffe/extensions/base.py b/src/griffe/extensions/base.py\nindex c6b1cf79..e3fc801e 100644\n--- a/src/griffe/extensions/base.py\n+++ b/src/griffe/extensions/base.py\n@@ -461,8 +461,7 @@ LoadableExtension = Union[str, Dict[str, Any], ExtensionType, Type[ExtensionType\n\n\n def load_extensions(\n-    # YORE: Bump 1.0.0: Replace ` | Sequence[LoadableExtension],` with `` within line.\n-    *exts: LoadableExtension | Sequence[LoadableExtension],\n+    *exts: LoadableExtension\n ) -&gt; Extensions:\n     \"\"\"Load configured extensions.\n\n@@ -474,22 +473,8 @@ def load_extensions(\n     \"\"\"\n     extensions = Extensions()\n\n-    # YORE: Bump 1.0.0: Remove block.\n-    all_exts: list[LoadableExtension] = []\n-    for ext in exts:\n-        if isinstance(ext, (list, tuple)):\n-            warnings.warn(\n-                \"Passing multiple extensions as a single list or tuple is deprecated. \"\n-                \"Please pass them as separate arguments instead.\",\n-                DeprecationWarning,\n-                stacklevel=2,\n-            )\n-            all_exts.extend(ext)\n-        else:\n-            all_exts.append(ext)  # type: ignore[arg-type]\n\n-    # YORE: Bump 1.0.0: Replace `all_exts` with `exts` within line.\n-    for extension in all_exts:\n+    for extension in exts:\n         ext = _load_extension(extension)\n         if isinstance(ext, list):\n             extensions.add(*ext)\ndiff --git a/src/griffe/git.py b/src/griffe/git.py\nindex d91fcb7f..77bd09c5 100644\n--- a/src/griffe/git.py\n+++ b/src/griffe/git.py\n@@ -16,19 +16,6 @@ from griffe.exceptions import GitError\n WORKTREE_PREFIX = \"griffe-worktree-\"\n\n\n-# YORE: Bump 1.0.0: Remove block.\n-def __getattr__(name: str) -&gt; Any:\n-    if name == \"load_git\":\n-        warnings.warn(\n-            f\"Importing {name} from griffe.git is deprecated. Import it from griffe.loader instead.\",\n-            DeprecationWarning,\n-            stacklevel=2,\n-        )\n-\n-        from griffe.loader import load_git\n-\n-        return load_git\n-    raise AttributeError\n\n\n def assert_git_repo(path: str | Path) -&gt; None:\ndiff --git a/src/griffe/loader.py b/src/griffe/loader.py\nindex 52cd5523..c908ee0b 100644\n--- a/src/griffe/loader.py\n+++ b/src/griffe/loader.py\n@@ -94,30 +94,6 @@ class GriffeLoader:\n             \"time_spent_inspecting\": 0,\n         }\n\n-    # YORE: Bump 1.0.0: Remove block.\n-    def load_module(\n-        self,\n-        module: str | Path,\n-        *,\n-        submodules: bool = True,\n-        try_relative_path: bool = True,\n-        find_stubs_package: bool = False,\n-    ) -&gt; Object:\n-        \"\"\"Renamed `load`. Load an object as a Griffe object, given its dotted path.\n-\n-        This method was renamed [`load`][griffe.loader.GriffeLoader.load].\n-        \"\"\"\n-        warnings.warn(\n-            \"The `load_module` method was renamed `load`, and is deprecated.\",\n-            DeprecationWarning,\n-            stacklevel=2,\n-        )\n-        return self.load(  # type: ignore[return-value]\n-            module,\n-            submodules=submodules,\n-            try_relative_path=try_relative_path,\n-            find_stubs_package=find_stubs_package,\n-        )\n\n     def load(\n         self,\n@@ -127,8 +103,6 @@ class GriffeLoader:\n         submodules: bool = True,\n         try_relative_path: bool = True,\n         find_stubs_package: bool = False,\n-        # YORE: Bump 1.0.0: Remove line.\n-        module: str | Path | None = None,\n     ) -&gt; Object | Alias:\n         \"\"\"Load an object as a Griffe object, given its Python or file path.\n\n@@ -160,16 +134,6 @@ class GriffeLoader:\n         Returns:\n             A Griffe object.\n         \"\"\"\n-        # YORE: Bump 1.0.0: Remove block.\n-        if objspec is None and module is None:\n-            raise TypeError(\"load() missing 1 required positional argument: 'objspec'\")\n-        if objspec is None:\n-            objspec = module\n-            warnings.warn(\n-                \"Parameter 'module' was renamed 'objspec' and made positional-only.\",\n-                DeprecationWarning,\n-                stacklevel=2,\n-            )\n\n         obj_path: str\n         package = None\n@@ -739,8 +703,6 @@ def load(\n     force_inspection: bool = False,\n     store_source: bool = True,\n     find_stubs_package: bool = False,\n-    # YORE: Bump 1.0.0: Remove line.\n-    module: str | Path | None = None,\n     resolve_aliases: bool = False,\n     resolve_external: bool | None = None,\n     resolve_implicit: bool = False,\n@@ -808,8 +770,6 @@ def load(\n         submodules=submodules,\n         try_relative_path=try_relative_path,\n         find_stubs_package=find_stubs_package,\n-        # YORE: Bump 1.0.0: Remove line.\n-        module=module,\n     )\n     if resolve_aliases:\n         loader.resolve_aliases(implicit=resolve_implicit, external=resolve_external)\n@@ -832,8 +792,6 @@ def load_git(\n     allow_inspection: bool = True,\n     force_inspection: bool = False,\n     find_stubs_package: bool = False,\n-    # YORE: Bump 1.0.0: Remove line.\n-    module: str | Path | None = None,\n     resolve_aliases: bool = False,\n     resolve_external: bool | None = None,\n     resolve_implicit: bool = False,\n@@ -885,9 +843,6 @@ def load_git(\n         if isinstance(objspec, Path):\n             objspec = worktree / objspec\n\n-        # YORE: Bump 1.0.0: Remove block.\n-        if isinstance(module, Path):\n-            module = worktree / module\n\n         return load(\n             objspec,\n@@ -902,8 +857,6 @@ def load_git(\n             allow_inspection=allow_inspection,\n             force_inspection=force_inspection,\n             find_stubs_package=find_stubs_package,\n-            # YORE: Bump 1.0.0: Remove line.\n-            module=module,\n             resolve_aliases=resolve_aliases,\n             resolve_external=resolve_external,\n             resolve_implicit=resolve_implicit,\ndiff --git a/src/griffe/mixins.py b/src/griffe/mixins.py\nindex 91006b5d..c030dabc 100644\n--- a/src/griffe/mixins.py\n+++ b/src/griffe/mixins.py\n@@ -409,33 +409,28 @@ class ObjectAliasMixin(GetMembersMixin, SetMembersMixin, DelMembersMixin, Serial\n         \"\"\"\n         # Give priority to the `public` attribute if it is set.\n         if self.public is not None:  # type: ignore[attr-defined]\n-            # YORE: Bump 1.0.0: Replace line with `return self.public`.\n-            return _True if self.public else _False  # type: ignore[return-value,attr-defined]\n+            return self.public\n\n         # If the object is defined at the module-level and is listed in `__all__`, it is public.\n         # If the parent module defines `__all__` but does not list the object, it is private.\n         if self.parent and self.parent.is_module and bool(self.parent.exports):  # type: ignore[attr-defined]\n-            # YORE: Bump 1.0.0: Replace line with `return self.name in self.parent.exports`.\n-            return _True if self.name in self.parent.exports else _False  # type: ignore[attr-defined,return-value]\n+            return self.name in self.parent.exports\n\n         # Special objects are always considered public.\n         # Even if we don't access them directly, they are used through different *public* means\n         # like instantiating classes (`__init__`), using operators (`__eq__`), etc..\n         if self.is_private:\n-            # YORE: Bump 1.0.0: Replace line with `return False`.\n-            return _False  # type: ignore[return-value]\n+            return False\n\n         # TODO: In a future version, we will support two conventions regarding imports:\n         # - `from a import x as x` marks `x` as public.\n         # - `from a import *` marks all wildcard imported objects as public.\n         # The following condition effectively filters out imported objects.\n         if self.is_alias and not (self.inherited or (self.parent and self.parent.is_alias)):  # type: ignore[attr-defined]\n-            # YORE: Bump 1.0.0: Replace line with `return False`.\n-            return _False  # type: ignore[return-value]\n+            return False\n\n         # If we reached this point, the object is public.\n-        # YORE: Bump 1.0.0: Replace line with `return True`.\n-        return _True  # type: ignore[return-value]\n+        return True\n\n     @property\n     def is_deprecated(self) -&gt; bool:\ndiff --git a/src/griffe/tests.py b/src/griffe/tests.py\nindex 75d07975..e0b2effc 100644\n--- a/src/griffe/tests.py\n+++ b/src/griffe/tests.py\n@@ -317,11 +317,7 @@ def module_vtree(path: str, *, leaf_package: bool = True, return_leaf: bool = Fa\n     parts = path.split(\".\")\n     modules = [Module(name, filepath=Path(*parts[:index], \"__init__.py\")) for index, name in enumerate(parts)]\n     if not leaf_package:\n-        # YORE: EOL 3.8: Replace block with line 2.\n-        try:\n-            filepath = modules[-1].filepath.with_stem(parts[-1])  # type: ignore[union-attr]\n-        except AttributeError:\n-            filepath = modules[-1].filepath.with_name(f\"{parts[-1]}.py\")  # type: ignore[union-attr]\n+        filepath = modules[-1].filepath.with_stem(parts[-1])  # type: ignore[union-attr]\n\n         modules[-1]._filepath = filepath\n     return vtree(*modules, return_leaf=return_leaf)  # type: ignore[return-value]\n</code></pre> <p>We recommend you run a formatting pass on the code after <code>yore fix</code>, for example using Ruff or Black.</p>"},{"location":"usage/#limitations","title":"Limitations","text":"<p>There is no way yet to remove a line from a multiline docstring.</p>"},{"location":"reference/SUMMARY/","title":"SUMMARY","text":"<ul> <li> yore<ul> <li> cli</li> <li> debug</li> <li> lib</li> </ul> </li> </ul>"},{"location":"reference/yore/","title":"yore","text":""},{"location":"reference/yore/#yore","title":"yore","text":"<p>yore package.</p> <p>Manage legacy code with comments.</p> <p>Modules:</p> <ul> <li> <code>cli</code>           \u2013            <p>Module that contains the command line application.</p> </li> <li> <code>debug</code>           \u2013            <p>Debugging utilities.</p> </li> <li> <code>lib</code>           \u2013            <p>Library of functions for yore.</p> </li> </ul>"},{"location":"reference/yore/cli/","title":"yore.cli","text":""},{"location":"reference/yore/cli/#yore.cli","title":"cli","text":"<p>Module that contains the command line application.</p> <p>Modules:</p> <ul> <li> <code>debug</code>           \u2013            <p>Debugging utilities.</p> </li> </ul> <p>Classes:</p> <ul> <li> <code>CommandCheck</code>           \u2013            <p>Command to check Yore comments.</p> </li> <li> <code>CommandFix</code>           \u2013            <p>Command to fix Yore comments.</p> </li> <li> <code>CommandMain</code>           \u2013            <p>Command to manage legacy code in your code base with YORE comments.</p> </li> <li> <code>HelpOption</code>           \u2013            <p>Reusable class to share a <code>-h</code>, <code>--help</code> option.</p> </li> </ul> <p>Functions:</p> <ul> <li> <code>main</code>             \u2013              <p>Run the main program.</p> </li> <li> <code>print_and_exit</code>             \u2013              <p>Argument action callable to print something and exit immediately.</p> </li> </ul>"},{"location":"reference/yore/cli/#yore.cli.CommandCheck","title":"CommandCheck  <code>dataclass</code>","text":"<pre><code>CommandCheck(\n    *,\n    help: Annotated[\n        bool,\n        Arg(short=\"-h\", long=True, action=help),\n        Doc(\"Print the program help and exit.\"),\n    ] = False,\n    paths: Annotated[\n        list[Path],\n        Arg(),\n        Doc(\"Path to files or directories to check.\"),\n    ] = list(),\n    bump: Annotated[\n        str | None,\n        Arg(short=True, long=True),\n        Doc(\"The next version of your project.\"),\n    ] = None,\n    warn_before_eol: Annotated[\n        timedelta | None,\n        Arg(short=True, long=True, parse=_parse_timedelta),\n        Doc(\n            \"\\n            The time delta to start checking before the End of Life of a Python version.\\n            It is provided in a human-readable format, like `2 weeks` or `1 month`.\\n            Spaces are optional, and the unit can be shortened to a single letter:\\n            `d` for days, `w` for weeks, `m` for months, and `y` for years.\\n            \"\n        ),\n    ] = None\n)\n</code></pre> <p>               Bases: <code>HelpOption</code></p> <p>Command to check Yore comments.</p>"},{"location":"reference/yore/cli/#yore.cli.CommandFix","title":"CommandFix  <code>dataclass</code>","text":"<pre><code>CommandFix(\n    *,\n    help: Annotated[\n        bool,\n        Arg(short=\"-h\", long=True, action=help),\n        Doc(\"Print the program help and exit.\"),\n    ] = False,\n    paths: Annotated[\n        list[Path],\n        Arg(),\n        Doc(\"Path to files or directories to fix.\"),\n    ] = list(),\n    bump: Annotated[\n        str | None,\n        Arg(short=True, long=True),\n        Doc(\"The next version of your project.\"),\n    ] = None,\n    fix_before_eol: Annotated[\n        timedelta | None,\n        Arg(short=True, long=True, parse=_parse_timedelta),\n        Doc(\n            \"\\n            The time delta to start fixing before the End of Life of a Python version.\\n            It is provided in a human-readable format, like `2 weeks` or `1 month`.\\n            Spaces are optional, and the unit can be shortened to a single letter:\\n            `d` for days, `w` for weeks, `m` for months, and `y` for years.\\n            \"\n        ),\n    ] = None\n)\n</code></pre> <p>               Bases: <code>HelpOption</code></p> <p>Command to fix Yore comments.</p>"},{"location":"reference/yore/cli/#yore.cli.CommandMain","title":"CommandMain  <code>dataclass</code>","text":"<pre><code>CommandMain(\n    *,\n    help: Annotated[\n        bool,\n        Arg(short=\"-h\", long=True, action=help),\n        Doc(\"Print the program help and exit.\"),\n    ] = False,\n    subcommand: Annotated[\n        Subcommands[CommandCheck | CommandFix],\n        Doc(\"The selected subcommand.\"),\n    ],\n    version: Annotated[\n        bool,\n        Arg(\n            short=\"-V\",\n            long=True,\n            action=print_and_exit(get_version),\n            num_args=0,\n            help=\"Print the program version and exit.\",\n        ),\n    ] = False,\n    debug_info: Annotated[\n        bool,\n        Arg(\n            long=True,\n            action=print_and_exit(print_debug_info),\n            num_args=0,\n        ),\n        Doc(\"Print debug information.\"),\n    ] = False,\n    completion: Annotated[\n        bool,\n        Arg(\n            long=True,\n            action=completion,\n            choices=(\"complete\", \"generate\"),\n            help=\"Print shell-specific completion source.\",\n        ),\n    ] = False\n)\n</code></pre> <p>               Bases: <code>HelpOption</code></p> <p>Command to manage legacy code in your code base with YORE comments.</p>"},{"location":"reference/yore/cli/#yore.cli.HelpOption","title":"HelpOption  <code>dataclass</code>","text":"<pre><code>HelpOption(\n    *,\n    help: Annotated[\n        bool,\n        Arg(short=\"-h\", long=True, action=help),\n        Doc(\"Print the program help and exit.\"),\n    ] = False\n)\n</code></pre> <p>Reusable class to share a <code>-h</code>, <code>--help</code> option.</p>"},{"location":"reference/yore/cli/#yore.cli.main","title":"main","text":"<pre><code>main(\n    args: Annotated[\n        list[str] | None,\n        Doc(\"Arguments passed from the command line.\"),\n    ] = None\n) -&gt; Annotated[int, Doc(\"An exit code.\")]\n</code></pre> <p>Run the main program.</p> <p>This function is executed when you type <code>yore</code> or <code>python -m yore</code>.</p> Source code in <code>src/yore/cli.py</code> <pre><code>def main(\n    args: An[list[str] | None, Doc(\"Arguments passed from the command line.\")] = None,\n) -&gt; An[int, Doc(\"An exit code.\")]:\n    \"\"\"Run the main program.\n\n    This function is executed when you type `yore` or `python -m yore`.\n    \"\"\"\n    logging.basicConfig(level=logging.INFO, format=\"%(message)s\")\n    output = cappa.Output(error_format=f\"[bold]{NAME}[/]: [bold red]error[/]: {{message}}\")\n    return cappa.invoke(CommandMain, argv=args, output=output, backend=cappa.backend, completion=False, help=False)\n</code></pre>"},{"location":"reference/yore/cli/#yore.cli.print_and_exit","title":"print_and_exit","text":"<pre><code>print_and_exit(\n    func: Annotated[\n        Callable[[], str | None],\n        Doc(\"A function that returns or prints a string.\"),\n    ],\n    code: Annotated[\n        int, Doc(\"The status code to exit with.\")\n    ] = 0,\n) -&gt; Callable[[], None]\n</code></pre> <p>Argument action callable to print something and exit immediately.</p> Source code in <code>src/yore/cli.py</code> <pre><code>def print_and_exit(\n    func: An[Callable[[], str | None], Doc(\"A function that returns or prints a string.\")],\n    code: An[int, Doc(\"The status code to exit with.\")] = 0,\n) -&gt; Callable[[], None]:\n    \"\"\"Argument action callable to print something and exit immediately.\"\"\"\n\n    @wraps(func)\n    def _inner() -&gt; None:\n        raise cappa.Exit(func() or \"\", code=code)\n\n    return _inner\n</code></pre>"},{"location":"reference/yore/debug/","title":"yore.debug","text":""},{"location":"reference/yore/debug/#yore.debug","title":"debug","text":"<p>Debugging utilities.</p> <p>Classes:</p> <ul> <li> <code>Environment</code>           \u2013            <p>Dataclass to store environment information.</p> </li> <li> <code>Package</code>           \u2013            <p>Dataclass describing a Python package.</p> </li> <li> <code>Variable</code>           \u2013            <p>Dataclass describing an environment variable.</p> </li> </ul> <p>Functions:</p> <ul> <li> <code>get_debug_info</code>             \u2013              <p>Get debug/environment information.</p> </li> <li> <code>get_version</code>             \u2013              <p>Get version of the given distribution.</p> </li> <li> <code>print_debug_info</code>             \u2013              <p>Print debug/environment information.</p> </li> </ul>"},{"location":"reference/yore/debug/#yore.debug.Environment","title":"Environment  <code>dataclass</code>","text":"<pre><code>Environment(\n    interpreter_name: str,\n    interpreter_version: str,\n    interpreter_path: str,\n    platform: str,\n    packages: list[Package],\n    variables: list[Variable],\n)\n</code></pre> <p>Dataclass to store environment information.</p> <p>Attributes:</p> <ul> <li> <code>interpreter_name</code>               (<code>str</code>)           \u2013            <p>Python interpreter name.</p> </li> <li> <code>interpreter_path</code>               (<code>str</code>)           \u2013            <p>Path to Python executable.</p> </li> <li> <code>interpreter_version</code>               (<code>str</code>)           \u2013            <p>Python interpreter version.</p> </li> <li> <code>packages</code>               (<code>list[Package]</code>)           \u2013            <p>Installed packages.</p> </li> <li> <code>platform</code>               (<code>str</code>)           \u2013            <p>Operating System.</p> </li> <li> <code>variables</code>               (<code>list[Variable]</code>)           \u2013            <p>Environment variables.</p> </li> </ul>"},{"location":"reference/yore/debug/#yore.debug.Environment.interpreter_name","title":"interpreter_name  <code>instance-attribute</code>","text":"<pre><code>interpreter_name: str\n</code></pre> <p>Python interpreter name.</p>"},{"location":"reference/yore/debug/#yore.debug.Environment.interpreter_path","title":"interpreter_path  <code>instance-attribute</code>","text":"<pre><code>interpreter_path: str\n</code></pre> <p>Path to Python executable.</p>"},{"location":"reference/yore/debug/#yore.debug.Environment.interpreter_version","title":"interpreter_version  <code>instance-attribute</code>","text":"<pre><code>interpreter_version: str\n</code></pre> <p>Python interpreter version.</p>"},{"location":"reference/yore/debug/#yore.debug.Environment.packages","title":"packages  <code>instance-attribute</code>","text":"<pre><code>packages: list[Package]\n</code></pre> <p>Installed packages.</p>"},{"location":"reference/yore/debug/#yore.debug.Environment.platform","title":"platform  <code>instance-attribute</code>","text":"<pre><code>platform: str\n</code></pre> <p>Operating System.</p>"},{"location":"reference/yore/debug/#yore.debug.Environment.variables","title":"variables  <code>instance-attribute</code>","text":"<pre><code>variables: list[Variable]\n</code></pre> <p>Environment variables.</p>"},{"location":"reference/yore/debug/#yore.debug.Package","title":"Package  <code>dataclass</code>","text":"<pre><code>Package(name: str, version: str)\n</code></pre> <p>Dataclass describing a Python package.</p> <p>Attributes:</p> <ul> <li> <code>name</code>               (<code>str</code>)           \u2013            <p>Package name.</p> </li> <li> <code>version</code>               (<code>str</code>)           \u2013            <p>Package version.</p> </li> </ul>"},{"location":"reference/yore/debug/#yore.debug.Package.name","title":"name  <code>instance-attribute</code>","text":"<pre><code>name: str\n</code></pre> <p>Package name.</p>"},{"location":"reference/yore/debug/#yore.debug.Package.version","title":"version  <code>instance-attribute</code>","text":"<pre><code>version: str\n</code></pre> <p>Package version.</p>"},{"location":"reference/yore/debug/#yore.debug.Variable","title":"Variable  <code>dataclass</code>","text":"<pre><code>Variable(name: str, value: str)\n</code></pre> <p>Dataclass describing an environment variable.</p> <p>Attributes:</p> <ul> <li> <code>name</code>               (<code>str</code>)           \u2013            <p>Variable name.</p> </li> <li> <code>value</code>               (<code>str</code>)           \u2013            <p>Variable value.</p> </li> </ul>"},{"location":"reference/yore/debug/#yore.debug.Variable.name","title":"name  <code>instance-attribute</code>","text":"<pre><code>name: str\n</code></pre> <p>Variable name.</p>"},{"location":"reference/yore/debug/#yore.debug.Variable.value","title":"value  <code>instance-attribute</code>","text":"<pre><code>value: str\n</code></pre> <p>Variable value.</p>"},{"location":"reference/yore/debug/#yore.debug.get_debug_info","title":"get_debug_info","text":"<pre><code>get_debug_info() -&gt; Environment\n</code></pre> <p>Get debug/environment information.</p> <p>Returns:</p> <ul> <li> <code>Environment</code>           \u2013            <p>Environment information.</p> </li> </ul> Source code in <code>src/yore/debug.py</code> <pre><code>def get_debug_info() -&gt; Environment:\n    \"\"\"Get debug/environment information.\n\n    Returns:\n        Environment information.\n    \"\"\"\n    py_name, py_version = _interpreter_name_version()\n    packages = [\"yore\"]\n    variables = [\"PYTHONPATH\", *[var for var in os.environ if var.startswith(\"YORE\")]]\n    return Environment(\n        interpreter_name=py_name,\n        interpreter_version=py_version,\n        interpreter_path=sys.executable,\n        platform=platform.platform(),\n        variables=[Variable(var, val) for var in variables if (val := os.getenv(var))],\n        packages=[Package(pkg, get_version(pkg)) for pkg in packages],\n    )\n</code></pre>"},{"location":"reference/yore/debug/#yore.debug.get_version","title":"get_version","text":"<pre><code>get_version(dist: str = 'yore') -&gt; str\n</code></pre> <p>Get version of the given distribution.</p> <p>Parameters:</p> <ul> <li> <code>dist</code>               (<code>str</code>, default:                   <code>'yore'</code> )           \u2013            <p>A distribution name.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>str</code>           \u2013            <p>A version number.</p> </li> </ul> Source code in <code>src/yore/debug.py</code> <pre><code>def get_version(dist: str = \"yore\") -&gt; str:\n    \"\"\"Get version of the given distribution.\n\n    Parameters:\n        dist: A distribution name.\n\n    Returns:\n        A version number.\n    \"\"\"\n    try:\n        return metadata.version(dist)\n    except metadata.PackageNotFoundError:\n        return \"0.0.0\"\n</code></pre>"},{"location":"reference/yore/debug/#yore.debug.print_debug_info","title":"print_debug_info","text":"<pre><code>print_debug_info() -&gt; None\n</code></pre> <p>Print debug/environment information.</p> Source code in <code>src/yore/debug.py</code> <pre><code>def print_debug_info() -&gt; None:\n    \"\"\"Print debug/environment information.\"\"\"\n    info = get_debug_info()\n    print(f\"- __System__: {info.platform}\")\n    print(f\"- __Python__: {info.interpreter_name} {info.interpreter_version} ({info.interpreter_path})\")\n    print(\"- __Environment variables__:\")\n    for var in info.variables:\n        print(f\"  - `{var.name}`: `{var.value}`\")\n    print(\"- __Installed packages__:\")\n    for pkg in info.packages:\n        print(f\"  - `{pkg.name}` v{pkg.version}\")\n</code></pre>"},{"location":"reference/yore/lib/","title":"yore.lib","text":""},{"location":"reference/yore/lib/#yore.lib","title":"lib","text":"<p>Library of functions for yore.</p> <p>Classes:</p> <ul> <li> <code>YoreComment</code>           \u2013            <p>A Yore-comment.</p> </li> </ul> <p>Functions:</p> <ul> <li> <code>yield_buffer_comments</code>             \u2013              <p>Yield all Yore-comments in a buffer.</p> </li> <li> <code>yield_directory_comments</code>             \u2013              <p>Yield all Yore-comments in a directory.</p> </li> <li> <code>yield_file_comments</code>             \u2013              <p>Yield all Yore-comments in a file.</p> </li> <li> <code>yield_path_comments</code>             \u2013              <p>Yield all Yore-comments in a file or directory.</p> </li> <li> <code>yield_python_files</code>             \u2013              <p>Yield all Python files in a directory.</p> </li> </ul> <p>Attributes:</p> <ul> <li> <code>BlockOrLine</code>           \u2013            <p>A block or a line.</p> </li> <li> <code>COMMENT_PATTERN</code>           \u2013            <p>The Yore-comment pattern, as a regular expression.</p> </li> <li> <code>DEFAULT_EXCLUDE</code>           \u2013            <p>The default patterns to exclude when scanning directories.</p> </li> <li> <code>DEFAULT_PREFIX</code>           \u2013            <p>The default prefix for Yore-comments.</p> </li> <li> <code>YoreKind</code>           \u2013            <p>The supported kind of Yore-comments.</p> </li> <li> <code>eol_dates</code>           \u2013            <p>A dictionary of Python versions and their End of Life dates.</p> </li> </ul>"},{"location":"reference/yore/lib/#yore.lib.BlockOrLine","title":"BlockOrLine  <code>module-attribute</code>","text":"<pre><code>BlockOrLine = Literal['block', 'line']\n</code></pre> <p>A block or a line.</p>"},{"location":"reference/yore/lib/#yore.lib.COMMENT_PATTERN","title":"COMMENT_PATTERN  <code>module-attribute</code>","text":"<pre><code>COMMENT_PATTERN = \"\\n    ^\\\\s*\\n    \\\\#\\\\ {prefix}:\\\\ (?P&lt;kind&gt;bump|eol)\\\\ (?P&lt;version&gt;[^:]+):\\\\ (?:\\n        remove\\\\ (?P&lt;remove&gt;block|line)\\n        |\\n        replace\\\\ (?P&lt;replace&gt;block|line)\\\\ with\\\\ (?:\\n            line\\\\ (?P&lt;line&gt;\\\\d+)\\n            |\\n            lines\\\\ (?P&lt;lines&gt;[\\\\d, -]+)\\n            |\\n            `(?P&lt;string&gt;.+)`\\n        )\\n        |\\n        (?P&lt;regex&gt;regex-)?replace\\\\ `(?P&lt;pattern1&gt;.+)`\\\\ with\\\\ `(?P&lt;pattern2&gt;.*)`\\\\ within\\\\ (?P&lt;within&gt;block|line)\\n    )\\\\.?.*$\\n\"\n</code></pre> <p>The Yore-comment pattern, as a regular expression.</p>"},{"location":"reference/yore/lib/#yore.lib.DEFAULT_EXCLUDE","title":"DEFAULT_EXCLUDE  <code>module-attribute</code>","text":"<pre><code>DEFAULT_EXCLUDE = ['.*', '__py*', 'build', 'dist']\n</code></pre> <p>The default patterns to exclude when scanning directories.</p>"},{"location":"reference/yore/lib/#yore.lib.DEFAULT_PREFIX","title":"DEFAULT_PREFIX  <code>module-attribute</code>","text":"<pre><code>DEFAULT_PREFIX = 'YORE'\n</code></pre> <p>The default prefix for Yore-comments.</p>"},{"location":"reference/yore/lib/#yore.lib.YoreKind","title":"YoreKind  <code>module-attribute</code>","text":"<pre><code>YoreKind = Literal['bump', 'eol']\n</code></pre> <p>The supported kind of Yore-comments.</p>"},{"location":"reference/yore/lib/#yore.lib.eol_dates","title":"eol_dates  <code>module-attribute</code>","text":"<pre><code>eol_dates = _LazyEOLDates()\n</code></pre> <p>A dictionary of Python versions and their End of Life dates.</p>"},{"location":"reference/yore/lib/#yore.lib.YoreComment","title":"YoreComment  <code>dataclass</code>","text":"<pre><code>YoreComment(\n    file: Path,\n    lineno: int,\n    raw: str,\n    kind: YoreKind,\n    version: str,\n    remove: BlockOrLine | None = None,\n    replace: BlockOrLine | None = None,\n    line: int | None = None,\n    lines: list[int] | None = None,\n    string: str | None = None,\n    regex: bool = False,\n    pattern1: str | None = None,\n    pattern2: str | None = None,\n    within: BlockOrLine | None = None,\n)\n</code></pre> <p>A Yore-comment.</p> <p>Methods:</p> <ul> <li> <code>check</code>             \u2013              <p>Check the comment.</p> </li> <li> <code>fix</code>             \u2013              <p>Fix the comment and code below it.</p> </li> </ul> <p>Attributes:</p> <ul> <li> <code>eol</code>               (<code>date</code>)           \u2013            <p>The End of Life date for the Python version.</p> </li> <li> <code>is_bump</code>               (<code>bool</code>)           \u2013            <p>Whether the comment is a bump comment.</p> </li> <li> <code>is_eol</code>               (<code>bool</code>)           \u2013            <p>Whether the comment is an End of Life comment.</p> </li> </ul>"},{"location":"reference/yore/lib/#yore.lib.YoreComment.eol","title":"eol  <code>property</code>","text":"<pre><code>eol: date\n</code></pre> <p>The End of Life date for the Python version.</p>"},{"location":"reference/yore/lib/#yore.lib.YoreComment.is_bump","title":"is_bump  <code>property</code>","text":"<pre><code>is_bump: bool\n</code></pre> <p>Whether the comment is a bump comment.</p>"},{"location":"reference/yore/lib/#yore.lib.YoreComment.is_eol","title":"is_eol  <code>property</code>","text":"<pre><code>is_eol: bool\n</code></pre> <p>Whether the comment is an End of Life comment.</p>"},{"location":"reference/yore/lib/#yore.lib.YoreComment.check","title":"check","text":"<pre><code>check(\n    bump: str | None = None,\n    warn_before_eol: timedelta | None = None,\n) -&gt; None\n</code></pre> <p>Check the comment.</p> <p>Parameters:</p> <ul> <li> <code>bump</code>               (<code>str | None</code>, default:                   <code>None</code> )           \u2013            <p>The next version of the project.</p> </li> <li> <code>warn_before_eol</code>               (<code>timedelta | None</code>, default:                   <code>None</code> )           \u2013            <p>The time delta to start warning before the End of Life of a Python version.</p> </li> </ul> Source code in <code>src/yore/lib.py</code> <pre><code>def check(self, bump: str | None = None, warn_before_eol: timedelta | None = None) -&gt; None:\n    \"\"\"Check the comment.\n\n    Parameters:\n        bump: The next version of the project.\n        warn_before_eol: The time delta to start warning before the End of Life of a Python version.\n    \"\"\"\n    msg_location = f\"{self.file}:{self.lineno}: \"\n    if self.is_eol:\n        if warn_before_eol and _within(warn_before_eol, self.eol):\n            logger.warning(\n                f\"{msg_location}Python {self.version} will reach its End of Life within approx. {naturaldelta(_delta(self.eol))}\",\n            )\n        elif _within(timedelta(days=0), self.eol):\n            logger.error(f\"{msg_location}Python {self.version} has reached its End of Life since {self.eol}\")\n    elif self.is_bump and bump and Version(bump) &gt;= Version(self.version):\n        logger.error(\n            f\"{msg_location}Code is scheduled for update/removal in {self.version} which is older than or equal to {bump}\",\n        )\n</code></pre>"},{"location":"reference/yore/lib/#yore.lib.YoreComment.fix","title":"fix","text":"<pre><code>fix(\n    buffer: list[str] | None = None,\n    bump: str | None = None,\n    fix_before_eol: timedelta | None = None,\n) -&gt; bool\n</code></pre> <p>Fix the comment and code below it.</p> <p>Parameters:</p> <ul> <li> <code>buffer</code>               (<code>list[str] | None</code>, default:                   <code>None</code> )           \u2013            <p>The buffer to fix. If not provided, read from and write to the file.</p> </li> <li> <code>bump</code>               (<code>str | None</code>, default:                   <code>None</code> )           \u2013            <p>The next version of the project.</p> </li> <li> <code>fix_before_eol</code>               (<code>timedelta | None</code>, default:                   <code>None</code> )           \u2013            <p>The time delta to start fixing before the End of Life of a Python version.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>bool</code>           \u2013            <p>Whether the comment was fixed.</p> </li> </ul> Source code in <code>src/yore/lib.py</code> <pre><code>def fix(\n    self,\n    buffer: list[str] | None = None,\n    bump: str | None = None,\n    fix_before_eol: timedelta | None = None,\n) -&gt; bool:\n    \"\"\"Fix the comment and code below it.\n\n    Parameters:\n        buffer: The buffer to fix. If not provided, read from and write to the file.\n        bump: The next version of the project.\n        fix_before_eol: The time delta to start fixing before the End of Life of a Python version.\n\n    Returns:\n        Whether the comment was fixed.\n    \"\"\"\n    write = buffer is None\n    buffer = buffer or self.file.read_text().splitlines(keepends=True)\n    if (\n        self.is_eol\n        and (fix_before_eol and _within(fix_before_eol, self.eol) or _within(timedelta(days=0), self.eol))\n    ) or (self.is_bump and bump and Version(bump) &gt;= Version(self.version)):\n        start = self.lineno - 1\n        del buffer[start]\n\n        if self.remove:\n            block_size = 1 if self.remove == \"line\" else _block_size(buffer, start)\n            del buffer[start : start + block_size]\n\n        elif self.replace:\n            block_size = 1 if self.replace == \"line\" else _block_size(buffer, start)\n            if self.line:\n                replacement = [buffer[start + self.line - 1]]\n            elif self.lines:\n                replacement = [buffer[start + line] for line in self.lines]\n            elif self.string:\n                replacement = [self.string + \"\\n\"]\n            else:\n                raise RuntimeError(\"No replacement specified\")\n            replacement = _reindent(replacement, _indent(buffer[start]))\n            buffer[start : start + block_size] = replacement\n\n        elif self.within:\n            block_size = 1 if self.within == \"line\" else _block_size(buffer, start)\n            block = buffer[start : start + block_size]\n            if self.regex:\n                pattern1: Pattern = re.compile(self.pattern1)\n                replacement = [pattern1.sub(self.pattern2, line) for line in block]\n            else:\n                replacement = [line.replace(self.pattern1, self.pattern2) for line in block]  # type: ignore[arg-type]\n            replacement = _reindent(replacement, _indent(buffer[start]))\n            buffer[start : start + block_size] = replacement\n\n        if write:\n            self.file.write_text(\"\".join(buffer))\n\n        return True\n    return False\n</code></pre>"},{"location":"reference/yore/lib/#yore.lib.yield_buffer_comments","title":"yield_buffer_comments","text":"<pre><code>yield_buffer_comments(\n    file: Path,\n    lines: list[str],\n    *,\n    prefix: str = DEFAULT_PREFIX\n) -&gt; Iterator[YoreComment]\n</code></pre> <p>Yield all Yore-comments in a buffer.</p> <p>Parameters:</p> <ul> <li> <code>file</code>               (<code>Path</code>)           \u2013            <p>The file to check.</p> </li> <li> <code>lines</code>               (<code>list[str]</code>)           \u2013            <p>The buffer to check (pre-read lines).</p> </li> <li> <code>prefix</code>               (<code>str</code>, default:                   <code>DEFAULT_PREFIX</code> )           \u2013            <p>The prefix to look for in the comments.</p> </li> </ul> <p>Yields:</p> <ul> <li> <code>YoreComment</code>           \u2013            <p>Yore-comments.</p> </li> </ul> Source code in <code>src/yore/lib.py</code> <pre><code>def yield_buffer_comments(file: Path, lines: list[str], *, prefix: str = DEFAULT_PREFIX) -&gt; Iterator[YoreComment]:\n    \"\"\"Yield all Yore-comments in a buffer.\n\n    Parameters:\n        file: The file to check.\n        lines: The buffer to check (pre-read lines).\n        prefix: The prefix to look for in the comments.\n\n    Yields:\n        Yore-comments.\n    \"\"\"\n    regex = re.compile(COMMENT_PATTERN.format(prefix=prefix), re.VERBOSE | re.IGNORECASE)\n    for lineno, line in enumerate(lines, 1):\n        if match := regex.match(line):\n            yield _match_to_comment(match, file, lineno)\n</code></pre>"},{"location":"reference/yore/lib/#yore.lib.yield_directory_comments","title":"yield_directory_comments","text":"<pre><code>yield_directory_comments(\n    directory: Path, *, prefix: str = DEFAULT_PREFIX\n) -&gt; Iterator[YoreComment]\n</code></pre> <p>Yield all Yore-comments in a directory.</p> <p>Parameters:</p> <ul> <li> <code>directory</code>               (<code>Path</code>)           \u2013            <p>The directory to check.</p> </li> <li> <code>prefix</code>               (<code>str</code>, default:                   <code>DEFAULT_PREFIX</code> )           \u2013            <p>The prefix to look for in the comments.</p> </li> </ul> <p>Yields:</p> <ul> <li> <code>YoreComment</code>           \u2013            <p>Yore-comments.</p> </li> </ul> Source code in <code>src/yore/lib.py</code> <pre><code>def yield_directory_comments(directory: Path, *, prefix: str = DEFAULT_PREFIX) -&gt; Iterator[YoreComment]:\n    \"\"\"Yield all Yore-comments in a directory.\n\n    Parameters:\n        directory: The directory to check.\n        prefix: The prefix to look for in the comments.\n\n    Yields:\n        Yore-comments.\n    \"\"\"\n    for file in yield_python_files(directory):\n        yield from yield_file_comments(file, prefix=prefix)\n</code></pre>"},{"location":"reference/yore/lib/#yore.lib.yield_file_comments","title":"yield_file_comments","text":"<pre><code>yield_file_comments(\n    file: Path, *, prefix: str = DEFAULT_PREFIX\n) -&gt; Iterator[YoreComment]\n</code></pre> <p>Yield all Yore-comments in a file.</p> <p>Parameters:</p> <ul> <li> <code>file</code>               (<code>Path</code>)           \u2013            <p>The file to check.</p> </li> <li> <code>prefix</code>               (<code>str</code>, default:                   <code>DEFAULT_PREFIX</code> )           \u2013            <p>The prefix to look for in the comments.</p> </li> </ul> <p>Yields:</p> <ul> <li> <code>YoreComment</code>           \u2013            <p>Yore-comments.</p> </li> </ul> Source code in <code>src/yore/lib.py</code> <pre><code>def yield_file_comments(file: Path, *, prefix: str = DEFAULT_PREFIX) -&gt; Iterator[YoreComment]:\n    \"\"\"Yield all Yore-comments in a file.\n\n    Parameters:\n        file: The file to check.\n        prefix: The prefix to look for in the comments.\n\n    Yields:\n        Yore-comments.\n    \"\"\"\n    try:\n        lines = file.read_text().splitlines()\n    except OSError:\n        return\n    yield from yield_buffer_comments(file, lines, prefix=prefix)\n</code></pre>"},{"location":"reference/yore/lib/#yore.lib.yield_path_comments","title":"yield_path_comments","text":"<pre><code>yield_path_comments(\n    path: Path, *, prefix: str = DEFAULT_PREFIX\n) -&gt; Iterator[YoreComment]\n</code></pre> <p>Yield all Yore-comments in a file or directory.</p> <p>Parameters:</p> <ul> <li> <code>path</code>               (<code>Path</code>)           \u2013            <p>The file or directory to check.</p> </li> <li> <code>prefix</code>               (<code>str</code>, default:                   <code>DEFAULT_PREFIX</code> )           \u2013            <p>The prefix to look for in the comments.</p> </li> </ul> <p>Yields:</p> <ul> <li> <code>YoreComment</code>           \u2013            <p>Yore-comments.</p> </li> </ul> Source code in <code>src/yore/lib.py</code> <pre><code>def yield_path_comments(path: Path, *, prefix: str = DEFAULT_PREFIX) -&gt; Iterator[YoreComment]:\n    \"\"\"Yield all Yore-comments in a file or directory.\n\n    Parameters:\n        path: The file or directory to check.\n        prefix: The prefix to look for in the comments.\n\n    Yields:\n        Yore-comments.\n    \"\"\"\n    if path.is_dir():\n        yield from yield_directory_comments(path, prefix=prefix)\n    else:\n        yield from yield_file_comments(path, prefix=prefix)\n</code></pre>"},{"location":"reference/yore/lib/#yore.lib.yield_python_files","title":"yield_python_files","text":"<pre><code>yield_python_files(\n    directory: Path, exclude: list[str] | None = None\n) -&gt; Iterator[Path]\n</code></pre> <p>Yield all Python files in a directory.</p> Source code in <code>src/yore/lib.py</code> <pre><code>def yield_python_files(directory: Path, exclude: list[str] | None = None) -&gt; Iterator[Path]:\n    \"\"\"Yield all Python files in a directory.\"\"\"\n    exclude = DEFAULT_EXCLUDE if exclude is None else exclude\n    logger.debug(f\"{directory}: scanning...\")\n    for path in directory.iterdir():\n        if path.is_file() and path.suffix == \".py\":\n            yield path\n        elif path.is_dir() and not any(path.match(pattern) for pattern in exclude):\n            yield from yield_python_files(path, exclude=exclude)\n</code></pre>"},{"location":"coverage/","title":"Coverage report","text":""}]}